import paho.mqtt.client as mqtt
import os
import subprocess
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import mm
from reportlab.lib.utils import simpleSplit
import json

# Read broker, username, and password from environment variables
broker = os.getenv("MQTT_BROKER", "localhost")
username = os.getenv("MQTT_USERNAME")
password = os.getenv("MQTT_PASSWORD")
topic = os.getenv("MQTT_TOPIC", "printer/commands")

def on_connect(client, userdata, flags, rc):
    """Callback for when the client connects to the MQTT broker."""
    if rc == 0:
        print("Connected to MQTT broker!")
        client.subscribe(topic)
    else:
        print(f"Failed to connect, return code {rc}")

def on_message(client, userdata, msg):
    """Callback for when a message is received."""
    print(f"Received message: {msg.payload.decode()} on topic {msg.topic}")    
    try:
        payload = json.loads(msg.payload.decode())
        printer_name = payload.get("printer_name")
        title = payload.get("title", "Print Job")
        message = payload.get("message", "No message provided")

        if not printer_name:
            raise ValueError("Missing 'printer_name' in payload")

        # Generate a formatted PDF
        pdf_path = generate_pdf(title, message)

        # Send the PDF to the printer
        send_to_printer(printer_name, pdf_path)

    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
    except Exception as e:
        print(f"Error handling message: {e}")

def generate_pdf(title, message):
    """Generate a PDF optimized for thermal receipt printers."""
    # Fixed page width
    page_width = 80 * mm  # 80mm in points
    margin = 5 * mm  # Margins for the receipt
    content_width = page_width - (2 * margin)

    # Initial height, updated dynamically based on content
    pdf_path = "/tmp/print_job.pdf"
    page_height = 200 * mm
    c = canvas.Canvas(pdf_path, pagesize=(page_width, page_height))

    # Title Section
    y = page_height - margin
    c.setFont("Helvetica-Bold", 12)
    title_lines = wrap_text(c, title, "Helvetica-Bold", 12, content_width)
    for line in title_lines:
        y -= 14
        c.drawString(margin, y, line)

    # Divider
    y -= 10
    c.line(margin, y, page_width - margin, y)

    # Message Section
    y -= 20
    c.setFont("Helvetica", 10)
    message_lines = wrap_text(c, message, "Helvetica", 10, content_width)
    for line in message_lines:
        y -= 12
        c.drawString(margin, y, line)

    # Adjust the page height based on final content placement
    final_page_height = max(page_height - y + margin, 80 * mm)
    c.setPageSize((page_width, final_page_height))

    # Footer Section
    y -= 20
    footer_text = "Generated by PrintMQTTify"
    c.setFont("Helvetica-Oblique", 8)
    c.drawString(margin, y, footer_text)

    # Finalize the PDF
    c.showPage()
    c.save()
    return pdf_path

def wrap_text(c, text, font_name, font_size, max_width):
    """Wrap text to fit within a given width."""
    c.setFont(font_name, font_size)
    words = text.split()
    lines = []
    current_line = []

    for word in words:
        test_line = " ".join(current_line + [word])
        if c.stringWidth(test_line, font_name, font_size) <= max_width:
            current_line.append(word)
        else:
            lines.append(" ".join(current_line))
            current_line = [word]

    if current_line:
        lines.append(" ".join(current_line))

    return lines

def send_to_printer(printer_name, pdf_path):
    """Send the generated PDF to the printer."""
    try:
        result = subprocess.run(
            ["lp", "-d", printer_name, pdf_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=True
        )
        print(f"Printed successfully: {result.stdout.decode()}")
    except subprocess.CalledProcessError as e:
        print(f"Failed to print. Error: {e.stderr.decode()}")

# Create an MQTT client instance
client = mqtt.Client(protocol=mqtt.MQTTv311)

# Set username and password if provided
if username and password:
    client.username_pw_set(username, password)

# Assign callback functions
client.on_connect = on_connect
client.on_message = on_message

# Connect to the broker
client.connect(broker, 1883, 60)

# Start the MQTT loop
client.loop_forever()
